import { Koc } from '@knockdown/knockdown'
import {Banner,ButtonGroup,Theme} from '@knockdown/undercard'
import {faHome} from '@fortawesome/free-solid-svg-icons/faHome'
import {faCompress} from '@fortawesome/free-solid-svg-icons/faCompress'
import {faExpand} from '@fortawesome/free-solid-svg-icons/faExpand'
import {faPalette} from '@fortawesome/free-solid-svg-icons/faPalette'

class Circlebox extends Koc {
  static get observedAttributes() { return ['::classes'] }

  constructor(cfg) {
    const self = super('mfi-graph')
    const {innerHTML, theme} = cfg||{}
    this._attributes = new Map()
    this.theme = theme||Theme
    this.html`
    <div id="container" style="display: flex; flex-direction: column;">
		<uc-banner>
			<slot name="icon">${this.fa(faHome,'48px','#b58900;')}</slot>
			<slot name="title"></slot>
			<slot name="controls">
				<button-group>
					<button class="control" data-bind="click: toggleTheme">${this.fa(faPalette,'36px','#93a1a1;')}</button>
				</button-group>
			</slot>
		</uc-banner>
		<div id="content" tabindex="-1" style="display: block; position: relative;"><slot></slot></div>
		</div>
    `
    // <button tabindex="0" class="control" style="margin-left: auto; cursor: pointer;" data-bind="click: toggleFullscreen, html: icon"></button>

    const app = document.querySelector('ko-app')
		const ko = this.ko()
		let vm = {
			icon: ko.observable(this.fa(faExpand,'36px','#93a1a1')),
			fullscreen: ko.observable(false),
			solarized: ko.observable(true)
			.watch(nv => {
				if(!!nv) {
					this.css`
					#content {
						filter: none;
					}`
				} else {
					this.css`
					#content {
						filter: invert(1);
					}`
				}
			})
		}
		vm.fullscreen.watch(nv => vm.icon.set(nv ? this.fa(faCompress,'36px','#93a1a1') : this.fa(faExpand,'36px','#93a1a1')))
		vm.toggleFullscreen = () => {
			if(vm.fullscreen.get()) {
				app.relinquishFullscreen(this)
			} else {
				app.giveFullscreen(this)
			}
			vm.fullscreen.toggle()
		}
		vm.toggleTheme = () => {
			vm.solarized.toggle()
		}
		ko.applyBindings(vm)
  }

  connectedCallback() {
    const self = super.connectedCallback()
    for(const [key, value] of this._attributes.entries()) {
      this[key] = value
      this.setAttribute(key,value)
      console.debug(this)
    }
    this.render(self)
  }

  attributeChangedCallback(name, oldValue, newValue) {
    switch (name) {
      case '::classes':
        this.__classes = newValue
        break;
      default:
    }
  }

  addAttribute(attr,val) {
    this._attributes.set(attr,val)
    return this
  }

  render() {
    const {colors} = this.theme
    let color = this.getAttribute('color')||colors.green
    color = colors.hasOwnProperty(color)
      ? colors[color]
      : color
    let background =  this.getAttribute('background')||colors.$base3
    background = colors.hasOwnProperty(background)
      ? colors[background]
      : background

    // This can serve as a hacky fix to allow fullscreen
    // this.insertAdjacentHTML('afterbegin', `<style>
    //
    // </style>`)
    this.css`
    #content {
      margin: 0;
      padding: 0;
      background-color: ${Theme.colors.$base2};
      border: 1px dashed #073642;
      border-top: none;
      border-radius: 0 !important;
      outline: none;
      height: 'auto';
      transition: 0.5s;
    }
    `
  }
}

customElements.define("mfi-graph", Circlebox)
export default Circlebox
