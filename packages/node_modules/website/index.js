import { Knockdown, Koc } from '@knockdown/knockdown'
import {Theme} from '@knockdown/undercard'
import Logo from '/assets/open-austin-logo.svg'
Theme.colors.contrast = '#a25614'

//Theme, name: barro negro "black clay"

const routes = {
  '/': () => import('/routes/home'),
}

const solarized = {
  light: '#eee8d5',
  dark: '#839496',
  bright: '#839496',
  contrast: '#a25614'
}

const colors = { ...solarized }

class Layout extends Koc {
  static get observedAttributes() { return ['dark'] }

  constructor() {
    super()

    const ko = this.ko()
    this.vm = {
      content: ko.observable('').watch(() => {
        this.render(this.shadowRoot)
      })
    }
    this.html`
    <div class="navbar">
      <h1>Affordable Housing Dashboard</h1>
      <div style="display: flex; align-items: center; padding-right: .5em;">
        <div class="logotxt">by</div>
        <img class="logo" src="${Logo}" />
      </div>
    </div>
    <div class="container">
      <div id="main" class="content" tabindex="-1" data-bind="html: content"></div>
    </div>`

    ko.applyBindings(this.vm)
  }

  attributeChangedCallback(name, old, nv) {
    const host = this.shadowRoot.firstChild
    switch (name) {
      case 'dark':
        switch (nv) {
          case false:
          case 0:
          case "false":
            host.removeAttribute('dark')
            break;
          default:
          host.setAttribute('dark',true)
        }
        break;
      default:

    }
  }

  connectedCallback() {
    const self = super.connectedCallback()

    this.resizer = () => {
      let tick = false
      if (!tick) {
        window.requestAnimationFrame(() => {
          this.render(self)
          tick = false
        })
        tick = true
      }
    }
    window.addEventListener('resize',this.resizer)

    this.render(self)
  }

  disconnectedCallback() {
    window.onresize = null
    this.innerHTML = ''
  }

  navigate(route) {
    try {
      this.vm.content.set(route)
    } catch (e) {
      // TODO 404 route
    } finally {

    }
  }

  render(self) {
    let portrait = window.innerWidth > 760
    let strata = window.innerWidth > 960
    let poly = self.querySelector('style')
    poly
    ? poly.innerHTML = ''
    : self.adoptedStyleSheets = []
    this.css`
    ${Theme.light}
    .container {
      background: #fff;
      background: radial-gradient(circle, rgba(253,246,227,1) 45%, rgba(255,255,255,1) 100%);
      position: relative;
      height: 100vh;
      width: 100vw;
      overflow: auto;
      z-index: 0;
    }
    .container[dark] {
      background: rgb(7,54,66);
      background: radial-gradient(circle, rgba(7,54,66,1) 15%, rgba(0,43,54,1) 50%);
    }
    .container[dark] > .sidebar {
      background: transparent;
      transition-duration: 0.5s;
    }
    .navbar {
      position: sticky;
      top: 0;
      min-height: 4em;
      width: 100vw;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1em 0.25em;
      background-color: ${Theme.colors.$base03};
      border: none;
      z-index: 5;
      box-shadow: 0px 0px 1em 0px #cc5500;
    }
    .navbar > h1 {
      background: linear-gradient(90deg, ${Theme.colors.yellow} 0%, #a25614 50%, ${colors.light} 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    .logo {
      height: 3em;
    }
    .logotxt {
      font: 16px cursive;
      color: #ea6036;
      height: 100%;
    }
    .content {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      padding: 0.33em;
      background: transparent;
      overflow-y: scroll;
      outline: none;
    }
    `
  }
}
customElements.define("layout-main", Layout)

class App extends HTMLElement {
  constructor() {
    const self = super()
    const ko = new Knockdown(document)

    this.routes = new Map()
    this.layout = new Layout()

    this.vm = {
      linkTo(ev) {
        const targ = ev.composedPath()[0]
        self.vm['route'].set(targ.getAttribute('to')||'/home')
      },
      route: ko.observable(window.location.pathname).watch(nv => {
        history.pushState({}, '', nv)
        window.dispatchEvent(new Event('popstate'))
      })
    }
    ko.applyBindings(this.vm)

    window.addEventListener('popstate', ev => {
      this.render()
    })
  }

  connectedCallback() {
    this.layout = this.appendChild(this.layout)
    this.mapRoutes(routes)
    this.render()
  }

  disconnectedCallback() {
    this.innerHTML = ''
  }

  giveFullscreen(el) {
    const uid = `ko${Math.floor(Math.random() * 255)}`
    el.__ph__ = uid
    const parent = el.parentNode
    el.__parent__ = parent
    el.insertAdjacentHTML('beforebegin',`<div id="${uid}"></div>`)
    const fullscreen = document.createElement('div')
    fullscreen.id = uid
    fullscreen.style = `
      position: absolute;
      top: 0;
      right: 0;
      left: 0;
      height: 100vh;
      z-index: 1001;
    `
    this.appendChild(fullscreen)
    fullscreen.appendChild(el)
    this.layout.inert = true
  }

  relinquishFullscreen(el) {
    const ph = el.__parent__.querySelector(`#${el.__ph__}`)
    el.__parent__.replaceChild(el,ph)
    this.removeChild(document.querySelector(`#${el.__ph__}`))
    this.layout.inert = null
  }

  mapRoutes(map) {
    if(Symbol.iterator in Object(map)) {
      map.forEach(pair => this.routes.set(pair[0],pair[1]))
    } else {
      Object.entries(map).forEach(pair => this.routes.set(pair[0],pair[1]))
    }
  }

  render() {
    const route = window.location.pathname === '/home'
      ? '/'
      : window.location.pathname
    try {
      this.routes.get(route).call().then(res => {
        this.layout.navigate(res.default)
      })
    } catch (e) {
      console.error('Invalid route', route)
    }
  }
}

customElements.define("ko-app", App)
