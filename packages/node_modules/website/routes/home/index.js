import { Bindings, Knockdown, Koc } from '@knockdown/knockdown'
import {Banner,Theme} from '@knockdown/undercard'
import Circlebox from 'components/circlebox'
import {faChartPie} from '@fortawesome/free-solid-svg-icons/faChartPie'
import Loki from 'plugin-lokijs'

class Route extends Koc {
  constructor() {
    const self = super('route-home')
    this.html`
    <div id="container">
      <h6 style="float: right;" data-bind="visible: timestamp">Data last fetched: <span style="color: ${Theme.colors.green}" data-bind="text: timestamp"></span></h6>
      <h1>Austin, TX</h1>
      <div id="nav-container-top"></div>
      <h2><span>Median Family Income</span></h2>
    <div class="section">
      <mfi-graph>
        <i slot=icon>${this.fa(faChartPie,'48px',Theme.colors.green)}</i>
        <div slot="title" style="color: ${Theme.colors.yellow}">MFI 30</div>
        <div class="infograph">
          <div class="pie" data-bind="html: pieTemplate"></div>
          <div class="stats">
            <div class="card">
              <div class="headliner" data-bind="text: mfi30per"></div>
              <div class="card-content">
                <label>Properties</label><div data-bind="text: mfi30"></div>
              </div>
              <div class="card-content">
                <label>Total Units</label><div data-bind="text: mfi30units"></div>
              </div>
            </div>
          </div>
        </div>
      </mfi-graph>
      <mfi-graph>
        <i slot=icon>${this.fa(faChartPie,'48px',Theme.colors.green)}</i>

      </mfi-graph>
      <mfi-graph>
        <i slot=icon>${this.fa(faChartPie,'48px',Theme.colors.green)}</i>

      </mfi-graph>
      <mfi-graph>
        <i slot=icon>${this.fa(faChartPie,'48px',Theme.colors.green)}</i>

      </mfi-graph>
    </div>
    </div>`

    const ko = this.ko()
    this.vm = {
      pieTemplate: ko.observable(''),
      timestamp: ko.observable(null).position('beforeend'),
      mfi30: ko.observable(''),
      mfi30units: ko.observable('')
    }
    this.vm.mfi30per = ko.dependentObservable(() => `${Math.round((this.vm.mfi30.get() / 383) * 1000) / 10}%`)
      .subscribeTo(this.vm.mfi30)
    ko.applyBindings(this.vm)
  }

  connectedCallback() {
    const self = super.connectedCallback()
    this.render(self)

    let observer = new IntersectionObserver(function(entries) {
      // no intersection with screen
      console.debug(entries)
      if(entries[0].intersectionRatio === 0)
        self.querySelector("h2").classList.add("h2-sticky")
      // fully intersects with screen
      else if(entries[0].intersectionRatio === 1)
        self.querySelector("h2").classList.remove("h2-sticky")
    }, { threshold: [0,1] });

    observer.observe(this.shadowRoot.querySelector("#nav-container-top"))
    this.load()
  }

  render() {
    const self = this.shadowRoot
    this.css`
    #container {
      height: 100%;
      min-height: 150vh;
    }
    .section {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(360px,1fr));
      grid-gap: 1em;
    }
    div[slot="title"] {
      font: 550 24px Verdana;
    }
    .card {
      background-color: ${Theme.colors.$base3};
      height: 100%;
      text-align: center;
      display: flex;
      flex-direction: column;
      justify-content: space-around;
    }
    .card-content > label {
      color: ${Theme.colors.yellow};
      font: bold 16px/18px Verdana;
    }
    .card-content > div[data-bind] {
      color: ${Theme.colors.blue};
      font: bold 20px/24px Verdana;
    }
    .headliner {
      font: bold 22px Verdana;
      color: ${Theme.colors.contrast};
    }
    `
    let contain = self.querySelector('#container').getBoundingClientRect()
    let graph = self.querySelector('mfi-graph').getBoundingClientRect()
    let width = graph.width / 2 - 20
    this.vm.pieTemplate.set(`<svg class="svg-host" width="${width}" height="${width}" ><circle r="${width/3}" cx="${width/2}" cy="${width/2}" /></svg>`)
    this.css`
    .infograph {
      position: relative;
      height: auto;
      width: ${graph.width - 10}px;
      display: grid;
      grid-gap: 0.25em;
      grid-template-areas:
        'chart stats'
        'chart stats'
    }
    .pie {
      padding: 0.25em;
      grid-area: chart;
    }
    .stats {
      padding: 0.25em;
      grid-area: stats;
    }
    circle {
      fill: ${Theme.colors.$base1};
      stroke: ${Theme.colors.contrast};
      stroke-width: ${ width / 1.5};
      stroke-dasharray: ${(34 / 382) * 100 } ${2 * Math.PI * (width / 2)};
    }
    .svg-host {
      transform: rotate(-90deg);
      background: ${Theme.colors.$base1};
      border-radius: 50%;
    }
    h2 {
      position: sticky;
      top: 0;
      color: #a25614;
      white-space: nowrap;
      z-index: 5;
    }
    h2 > span {
      transition-duration: 0.25s;
    }
    .h2-sticky > span {
      position: relative;
      background-color: ${Theme.colors.$base2};
      ${ contain.width > 640 ? 'padding: 10px 50px;' : 'padding: 10px;' }
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;
      box-shadow: 0px 0px .25em 0px #cc5500;
      z-index: 5;
    }
    `
  }

  async load() {
    const db = await Loki
    console.debug(db)
    const timestamp = Date.now()
    let metatime = 0
    const coll = db.getCollection('atxahd')
    if(!!coll.chain().simplesort('data__id').data().length) {
      const tx = coll.getTransform('metadata')
      if (tx) {
        metatime = tx[0].value.timestamp
        this.vm.timestamp.set(new Date(metatime).toString())
      }
      return (timestamp - metatime > 86400000)
      ? this.fetch()
      : this.process(coll)
    } else {
      coll.addTransform('metadata', [{
        type: 'meta',
        value : {
          timestamp
        }
      }])
      let results = await fetch('https://data.austintexas.gov/resource/4syj-z4ky.json')
      .then(res => res.json())
      .then(json => {
        json.forEach(i => coll.insert(i))
        db._db.saveDatabase()
        this.vm.timestamp.set(new Date(timestamp).toString())
        this.load()
      })
      return results
    }
  }

  process(coll) {
    const reducer = (accumulator, currentValue) => accumulator + (currentValue.data__num_units_mfi_30 * 1)

    const ko = this.ko()
    let mfi30 = coll.addDynamicView('MFI_30')
    let mfi30arr = mfi30.applyFind(({'data__num_units_mfi_30': { '$gt': "0" }})).data()
    this.vm.mfi30.set(mfi30arr.length)
    this.vm.mfi30units.set(mfi30arr.reduce(reducer,0))

  }
}

customElements.define("route-home", Route)
export default new Route()
